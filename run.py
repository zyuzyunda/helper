import streamlit as st
import plotly.graph_objects as go
import io
import pickle
import networkx as nx
import plotly.express as px
import streamlit as st
import streamlit.components.v1 as components
from pyvis.network import Network
import tempfile
import os
import pandas as pd
from app.utils import (
    read_resume_pdf, read_txt, load_skills_json,
    extract_entities_with_skills, extract_emails, extract_phone_number,
    extract_education, extract_career_titles, extract_locations,
    has_photo_in_resume, extract_name, clean_skills, final_clean_skills,
    estimate_experience_years, map_experience_to_category,
    process_vacancy, compare_resume_to_vacancy, calculate_combined_similarity,
    calculate_tfidf_similarity, generate_resume_recommendations, generate_roadmap_for_profession
)
# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ ---
GRAPH_PATH = "/Users/macbook/Projects/helper/app/data/job_graphs_with_meta.pkl"

with open(GRAPH_PATH, "rb") as f:
    job_graphs = pickle.load(f)

# --- –û–±—ä–µ–¥–∏–Ω—è–µ–º ---
def combine_graphs(graphs):
    G = nx.Graph()
    for g in graphs.values():
        G.add_nodes_from(g.nodes(data=True))
        G.add_edges_from(g.edges(data=True))
    return G

G_filtered = combine_graphs(job_graphs)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É–∑–ª—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å type –≤ ['skill', 'skills']
top_skills = sorted(
    [
        (node, G_filtered.nodes[node].get('weight', 0))
        for node in G_filtered.nodes
        if G_filtered.nodes[node].get('type', '').lower() in ['skill', 'skills']
    ],
    key=lambda x: x[1],
    reverse=True
)[:20]


df_top_skills = pd.DataFrame(top_skills, columns=["skill", "tfidf_weight"])

fig_bar = px.bar(
    df_top_skills,
    x="skill", y="tfidf_weight",
    labels={"skill": "–ù–∞–≤—ã–∫", "tfidf_weight": "TF-IDF –≤–µ—Å"},
    title="–¢–æ–ø-20 –Ω–∞–≤—ã–∫–æ–≤ –ø–æ TF-IDF –≤–µ—Å—É",
)
fig_bar.update_layout(xaxis={'categoryorder':'total descending'})


# --- Pyvis –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ ---
def generate_full_graph(G_filtered):
    net = Network(height="800px", width="100%", bgcolor="#ffffff", font_color="black", notebook=False)
    for node, data in G_filtered.nodes(data=True):
        node_type = data.get('type', 'skill')
        color = {
            'profession': 'skyblue',
            'skill': 'lightgreen',
            'education': 'lightcoral',
            'experience': 'violet'
        }.get(node_type, 'grey')
        shape = {
            'profession': 'dot',
            'skill': 'box',
            'education': 'box',
            'experience': 'triangle'
        }.get(node_type, 'dot')
        size = 15 + G_filtered.degree(node) * 2
        net.add_node(node, label=node, color=color, size=size, shape=shape)
    for source, target, data in G_filtered.edges(data=True):
        label = data.get('label', '')
        net.add_edge(source, target, title=label)
    net.repulsion(node_distance=200, central_gravity=0.2, spring_length=200, spring_strength=0.05, damping=0.9)
    return net

# –í—Ä–µ–º–µ–Ω–Ω—ã–π HTML-—Ñ–∞–π–ª –¥–ª—è Pyvis
with tempfile.NamedTemporaryFile(delete=False, suffix='.html') as f:
    tmp_path = f.name
    net = generate_full_graph(G_filtered)
    net.save_graph(tmp_path)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.set_page_config(page_title="–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫", layout="wide")
tab1, tab2, tab3 = st.tabs(["üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏", "üß† –ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π –∏ –¥–∞—à–±–æ—Ä–¥", "üó∫Ô∏è –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞–∑–≤–∏—Ç–∏—è"])

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    with tab1:
        st.title("üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
        st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

        # === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
        skills_path = "app/data/skills.json"
        all_skills = load_skills_json(skills_path)

        resume_file = st.file_uploader("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ (PDF)", type="pdf")
        summary_file = st.file_uploader("üìù –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (TXT)", type="txt")
        vacancy_file = st.file_uploader("üìÉ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (TXT)", type="txt")

        if resume_file and summary_file and vacancy_file:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            resume_text = read_resume_pdf(resume_file)
            summary_text = read_txt(summary_file)
            vacancy_text = read_txt(vacancy_file)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ
            resume_entities = extract_entities_with_skills(resume_text, all_skills)
            emails = extract_emails(resume_text)
            phone_number = extract_phone_number(resume_text)
            education_info = extract_education(resume_text)
            career_titles = extract_career_titles(resume_text)
            found_locations = extract_locations(resume_text)
            name = extract_name(resume_text)
            cleaned_skills = clean_skills(resume_entities['SKILLS'], all_skills)
            final_skills = final_clean_skills(cleaned_skills, [])
            experience_years = estimate_experience_years(resume_text)
            experience_category = map_experience_to_category(experience_years)
            photo = has_photo_in_resume(resume_file)

            # –°–±–æ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            structured_resume = {
                "name": name,
                "email": emails[0] if emails else None,
                "phone": phone_number,
                "skills": final_skills,
                "education": list(education_info),
                "locations": list(found_locations),
                "career_titles": list(career_titles),
                "experience_category": experience_category,
                "has_photo": photo
            }

            # ===== –ë–ª–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ä–µ–∑—é–º–µ =====

            st.subheader("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ:")
            st.markdown(f"**üë§ –ò–º—è:** {structured_resume['name']}")
            st.markdown(f"**üìß Email:** {structured_resume['email']}")
            st.markdown(f"**üìû –¢–µ–ª–µ—Ñ–æ–Ω:** {structured_resume['phone']}")
            st.markdown("<div style='background-color:#e0f7fa;padding:10px;border-radius:10px'>", unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)

            # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            with st.container():
                st.markdown("### üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏")
                edited_career_titles = st.multiselect(
                    "–û—Ç–º–µ—Ç—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:",
                    options=structured_resume.get("career_titles") or [],
                    default=structured_resume.get("career_titles") or [],
                )

            with st.container():
                st.markdown("### üèôÔ∏è –õ–æ–∫–∞—Ü–∏–∏")
                edited_locations = st.multiselect(
                    "–û—Ç–º–µ—Ç—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:",
                    options=structured_resume.get("locations") or [],
                    default=structured_resume.get("locations") or [],
                )

            with st.container():
                st.markdown("### üìö –ù–∞–≤—ã–∫–∏")
                edited_skills = st.multiselect(
                    "–û—Ç–º–µ—Ç—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:",
                    options=structured_resume.get("skills") or [],
                    default=structured_resume.get("skills") or [],
                )

            with st.container():
                st.markdown("### üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
                edited_education = st.multiselect(
                    "–û—Ç–º–µ—Ç—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:",
                    options=structured_resume.get("education") or [],
                    default=structured_resume.get("education") or [],
                )

            with st.container():
                st.markdown("### ‚è≥ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
                experience_options = ["–ù–µ—Ç –æ–ø—ã—Ç–∞", "1-3 –≥–æ–¥–∞", "–û—Ç 3 –¥–æ 6 –ª–µ—Ç", "–ë–æ–ª–µ–µ 6 –ª–µ—Ç"]
                edited_experience = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:",
                    options=experience_options,
                    index=experience_options.index(structured_resume.get("experience_category")) if structured_resume.get("experience_category") in experience_options else 0
                )

            with st.container():
                st.markdown("### üñºÔ∏è –§–æ—Ç–æ –≤ —Ä–µ–∑—é–º–µ")
                edited_photo = st.checkbox(
                    "–ï—Å—Ç—å —Ñ–æ—Ç–æ –≤ —Ä–µ–∑—é–º–µ?",
                    value=structured_resume.get("has_photo", False)
                )

            # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if st.button("üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"):
                # –û–±–Ω–æ–≤–ª—è–µ–º structured_resume –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤–æ–∫
                structured_resume["career_titles"] = edited_career_titles
                structured_resume["locations"] = edited_locations
                structured_resume["skills"] = edited_skills
                structured_resume["education"] = edited_education
                structured_resume["experience_category"] = edited_experience
                structured_resume["has_photo"] = edited_photo

                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑...")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
                structured_vacancy = process_vacancy(vacancy_text, all_skills)

                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏
                comparison_result = compare_resume_to_vacancy(structured_resume, structured_vacancy)
                skills_match_percent = comparison_result['skill_match_percent']
                tfidf_similarity = calculate_tfidf_similarity(resume_text, summary_text)
                final_similarity = calculate_combined_similarity(skills_match_percent, tfidf_similarity)

                # –ë–ª–æ–∫ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                st.subheader("‚úçÔ∏è –°—Ö–æ–∂–µ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
                col1, col2 = st.columns(2)

                with col1:
                    st.header("")
                    st.metric("üìö Skills Match", f"{skills_match_percent:.2f}%")
                    st.metric("üîç TF-IDF Similarity", f"{tfidf_similarity * 100:.2f}%")

                with col2:
                    fig = go.Figure(go.Indicator(
                        mode="gauge+number",
                        value=final_similarity * 100,
                        domain={'x': [0, 1], 'y': [0, 1]},
                        title={'text': "üèÜ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞, %"},
                        gauge={
                            'axis': {'range': [0, 100]},
                            'bar': {'color': "#333333"},
                            'steps': [
                                {'range': [0, 30], 'color': "#FFCCCC"},   # –ö—Ä–∞—Å–Ω—ã–π
                                {'range': [30, 70], 'color': "#FFFF99"},  # –ñ–µ–ª—Ç—ã–π
                                {'range': [70, 100], 'color': "#99FF99"}  # –ó–µ–ª–µ–Ω—ã–π
                            ],
                        }
                    ))
                    st.plotly_chart(fig, use_container_width=True)

                recommendations = generate_resume_recommendations(structured_resume)
                if recommendations:
                    st.subheader("üì¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∑—é–º–µ")
                    for rec in recommendations:
                        st.write(f"‚Ä¢ {rec}")
                else:
                    st.success("‚úÖ –í–∞—à–µ —Ä–µ–∑—é–º–µ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–ª–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ!")
                
                st.subheader("üìö –ù–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
                unmatched_skills = comparison_result.get('unmatched_skills', [])

                if unmatched_skills:
                    # –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–≤—ã–∫–æ–≤
                    unmatched_skills_selected = st.multiselect(
                        "üìö –ù–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç:",
                        unmatched_skills,
                        default=unmatched_skills,
                        key="unmatched_skills"
                    )

                    # –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–≤—ã–∫–∏"
                    if st.button("üöÄ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–≤—ã–∫–∏", key="save_unmatched_skills"):
                        unmatched_skills = unmatched_skills_selected  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                        st.success("‚úÖ –ù–∞–≤—ã–∫–∏ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

                else:
                    st.success("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Ä–µ–∑—é–º–µ!")
    with tab2:
        st.subheader("üëÄ –î–∞—à–±–æ—Ä–¥")
        st.markdown("üîé –§–∏–ª—å—Ç—Ä—ã")

        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        companies = sorted(set(nx.get_node_attributes(G_filtered, "company").values()))
        cities = sorted(set(nx.get_node_attributes(G_filtered, "city").values()))
        experiences = sorted(set(nx.get_node_attributes(G_filtered, "experience_category").values()))
        published_dates = sorted(set(nx.get_node_attributes(G_filtered, "published_at").values()))
        professions = sorted([node for node, d in G_filtered.nodes(data=True) if d.get("type") == "profession"])

        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        with st.container():
            col1, col2, col3 = st.columns(3)
            with col1:
                selected_company = st.selectbox("–ö–æ–º–ø–∞–Ω–∏—è", ["–í—Å–µ"] + companies)
            with col2:
                selected_city = st.selectbox("–ì–æ—Ä–æ–¥", ["–í—Å–µ"] + cities)
            with col3:
                selected_experience = st.selectbox("–û–ø—ã—Ç", ["–í—Å–µ"] + experiences)

        with st.container():
            col4, col5 = st.columns(2)
            with col4:
                selected_date = st.selectbox("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", ["–í—Å–µ"] + published_dates)
            with col5:
                selected_profession = st.selectbox("–ü—Ä–æ—Ñ–µ—Å—Å–∏—è", ["–í—Å–µ"] + professions)


        # –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–∑–ª–æ–≤
        def filter_nodes(node, data):
            if data.get('type') == 'profession':
                if selected_profession != "–í—Å–µ" and node != selected_profession:
                    return False
                if selected_company != "–í—Å–µ" and data.get('company') != selected_company:
                    return False
                if selected_city != "–í—Å–µ" and data.get('city') != selected_city:
                    return False
                if selected_experience != "–í—Å–µ" and data.get('experience_category') != selected_experience:
                    return False
                if selected_date != "–í—Å–µ" and data.get('published_at') != selected_date:
                    return False
            return True

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        filtered_nodes = {n: d for n, d in G_filtered.nodes(data=True) if filter_nodes(n, d)}
        G_subgraph = G_filtered.subgraph(filtered_nodes.keys()).copy()

        col1, col2 = st.columns([2, 1]) 

        with col1:
            st.subheader("üèÜ –¢–æ–ø-20 –Ω–∞–≤—ã–∫–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            if not df_top_skills.empty:
                fig_bar.update_layout(height=600)
                st.plotly_chart(fig_bar, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è –ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏!")

        with col2:
            with col2:
                st.subheader("üìÑ –°–≤–æ–¥–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º")

                # –û–±—â–∏–µ —á–∏—Å–ª–∞
                st.metric("üîó –í—Å–µ–≥–æ —É–∑–ª–æ–≤", len(G_subgraph.nodes()))
                st.metric("üß© –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π", len(G_subgraph.edges()))

                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                professions_count = len({n for n, d in G_subgraph.nodes(data=True) if d.get("type") == "profession"})
                cities_count = len(set(nx.get_node_attributes(G_subgraph, "city").values()))
                companies_count = len(set(nx.get_node_attributes(G_subgraph, "company").values()))
                skills_count = len([n for n, d in G_subgraph.nodes(data=True) if d.get("type") in ["skill", "skills"]])

                st.markdown(f"üëî –ö–æ–ª-–≤–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: **{professions_count}**")
                st.markdown(f"üèôÔ∏è –ö–æ–ª-–≤–æ –≥–æ—Ä–æ–¥–æ–≤: **{cities_count}**")
                st.markdown(f"üè¢ –ö–æ–ª-–≤–æ –∫–æ–º–ø–∞–Ω–∏–π: **{companies_count}**")
                st.markdown(f"üõ†Ô∏è –ö–æ–ª-–≤–æ –Ω–∞–≤—ã–∫–æ–≤ –≤ –≥—Ä–∞—Ñ–µ: **{skills_count}**")

                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–ø—ã—Ç—É
                experience_distribution = pd.Series(nx.get_node_attributes(G_subgraph, "experience_category").values())
                if not experience_distribution.empty:
                    st.markdown("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–ø—ã—Ç—É:")
                    st.dataframe(experience_distribution.value_counts().rename_axis("–ö–∞—Ç–µ–≥–æ—Ä–∏—è").reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"))

                # –í—Å–µ –Ω–∞–≤—ã–∫–∏ (–ø–æ json)
                skills_path = "app/data/skills.json"
                all_skills = load_skills_json(skills_path)
                st.markdown(f"üìö –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: **{len(all_skills)}**")

        st.subheader("üëÄ –ó–¥–µ—Å—å –±—É–¥—É—Ç –µ—â–µ —Ä–∞–∑–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
        # === –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –≤ Pyvis ===
        st.subheader("üåê –ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π")

        with tempfile.NamedTemporaryFile(delete=False, suffix='.html') as tmp_file:
            net = generate_full_graph(G_subgraph)
            tmp_path = tmp_file.name
            net.save_graph(tmp_path)

        with open(tmp_path, 'r', encoding='utf-8') as f:
            html_graph = f.read()

        st.components.v1.html(html_graph, height=800, scrolling=True)

        os.unlink(tmp_path)
    with tab3:
        st.title("üó∫Ô∏è –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è")
        st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ –æ—Ç–º–µ—Ç—å—Ç–µ, –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å. –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ ‚Äî –∏ –º—ã —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –∑–∞ –≤–∞—Å.")

        # === 1. –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ===
        professions = sorted([n for n, d in G_filtered.nodes(data=True) if d.get("type") == "profession"])
        selected_profession = st.selectbox("üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é", professions)

        # === 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) ===
        resume_file = st.file_uploader("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ (PDF)", type="pdf", key="resume_roadmap")

        user_skills = set()
        if resume_file:
            resume_text = read_resume_pdf(resume_file)
            skills_path = "app/data/skills.json"
            all_skills = load_skills_json(skills_path)
            resume_entities = extract_entities_with_skills(resume_text, all_skills)
            cleaned_skills = clean_skills(resume_entities['SKILLS'], all_skills)
            final_skills = final_clean_skills(cleaned_skills, [])
            user_skills = set(final_skills)
            st.success(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(user_skills)} –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ —Ä–µ–∑—é–º–µ!")

        # === 3. –ù–∞–≤—ã–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π ===
        st.subheader("üìå –ù–∞–≤—ã–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π")
        related_skills = []
        for neighbor in G_filtered.neighbors(selected_profession):
            node_data = G_filtered.nodes[neighbor]
            if node_data.get("type") in ["skill", "skills"]:
                related_skills.append({
                    "–ù–∞–≤—ã–∫": neighbor,
                    "TF-IDF –≤–µ—Å": node_data.get("weight", 0),
                    "–£–∂–µ –≤ —Ä–µ–∑—é–º–µ": neighbor in user_skills
                })

        df = pd.DataFrame(related_skills).sort_values(by="TF-IDF –≤–µ—Å", ascending=False)

        # === 4. –û—Ç–º–µ—Ç–∫–∞ –≥–∞–ª–æ—á–∫–∞–º–∏ (—Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏–∑ —Ä–µ–∑—é–º–µ) ===
        selected_skills = st.multiselect(
            "‚úÖ –û—Ç–º–µ—Ç—å—Ç–µ –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å:",
            options=df["–ù–∞–≤—ã–∫"].tolist(),
            default=[row["–ù–∞–≤—ã–∫"] for row in related_skills if row["–£–∂–µ –≤ —Ä–µ–∑—é–º–µ"]]
        )

        # –î–æ–±–∞–≤–∏–º –∫–æ–ª–æ–Ω–∫—É "–û—Å–≤–æ–µ–Ω–æ" –ø–æ –≥–∞–ª–æ—á–∫–∞–º
        df["–û—Å–≤–æ–µ–Ω–æ"] = df["–ù–∞–≤—ã–∫"].apply(lambda x: "‚úÖ –î–∞" if x in selected_skills else "‚Äî")

        st.subheader("üõ§Ô∏è –í–∏–∑—É–∞–ª—å–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤")

        sorted_skills = df.sort_values(by="TF-IDF –≤–µ—Å", ascending=False)["–ù–∞–≤—ã–∫"].tolist()

        # –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Ä–æ–∂–∫—É
        roadmap_html = "<div style='display:flex;flex-wrap:wrap;align-items:center;margin-top:20px;'>"

        for i, skill in enumerate(sorted_skills):
            has_skill = skill in selected_skills
            bg_color = "#d4edda" if has_skill else "#f8f9fa"
            border = "2px solid #28a745" if has_skill else "1px solid #ccc"
            text_color = "#155724" if has_skill else "#333"

            step_html = f"""
            <div style='
                padding:10px 15px;
                margin:5px;
                background:{bg_color};
                border:{border};
                border-radius:20px;
                color:{text_color};
                font-weight:500;
                font-size:14px;
            '>
                {'‚úÖ ' if has_skill else '‚ûï '}–®–∞–≥ {i+1}: {skill}
            </div>
            """

            roadmap_html += step_html

            if i < len(sorted_skills) - 1:
                roadmap_html += "<div style='margin:5px;font-size:18px;'>‚û°Ô∏è</div>"

        roadmap_html += "</div>"

        st.markdown(roadmap_html, unsafe_allow_html=True)
        st.subheader("üõ† –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è:")
        st.dataframe(df[["–ù–∞–≤—ã–∫", "TF-IDF –≤–µ—Å", "–û—Å–≤–æ–µ–Ω–æ"]].reset_index(drop=True), width=1000)

        # === 5. –í—ã–≥—Ä—É–∑–∫–∞ –≤ CSV ===
        csv_buffer = io.StringIO()
        df_to_save = df[["–ù–∞–≤—ã–∫", "TF-IDF –≤–µ—Å", "–û—Å–≤–æ–µ–Ω–æ"]]
        df_to_save.to_csv(csv_buffer, index=False)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –≤ CSV",
            data=csv_buffer.getvalue(),
            file_name=f"roadmap_{selected_profession}.csv",
            mime="text/csv"
        )



    

if __name__ == "__main__":
    main()
